# GLIM USB GRUB2 Configuration

# In a generic shell "$@" expands to nothing when there are no args. In
# grubscript it expands to an empty arg. Hence SPECIAL CARE SHOULD BE TAKEN
# WHERE IT MATTERS. In particular `for .. in "$@"` loops should be wrapped in
# `if [ $# -gt 0 ] .. fi`

insmod regexp

# Required for GUI and to prevent "No video mode set" error
insmod all_video

# Keep the same graphic mode for kernel booting (passed as vga=)
# other values are "text" or any gfxmode value
set gfxpayload=keep

# Enable GUI
terminal_output gfxterm

loadfont unicode

insmod png
set theme=${prefix}/themes/invader/theme.txt

set isopath=/boot/iso
probe --set rootuuid --fs-uuid $root
# Required to have these available in other configfile files
export isopath
export rootuuid
export theme

function use {
  echo "Using $1 ..."
}

# Save the original value of $root and set it to $1
function change_root {
  root_saved="$root"
  root="$1"
}

# Restore $root value saved by change_root
function restore_root {
  root="$root_saved"
}

# Like 'loopback loop A', but check if (loop) already exists
function loop {
  if [ -e (loop) ]; then loopback -d loop; fi
  loopback loop "$1"
}

# Order by mtime DESC, literal value ASC
function cmp_mtime_literal {
  if [ "$1" -nt "$2" ]; then
    true
  elif [ "$1" -ot "$2" ]; then
    false
  else
    [ "$1" '<' "$2" ]
  fi
}

# Feed a list of isos (by one) to a callback in a sorted manner. The order is
# set by cmp_mtime_literal function. Args: callback iso1 iso2 ..
function for_each_sorted {
  set callback="$1"
  shift

  # The list of isos could contain unmatched patterns. Filter those out.
  if [ $# -gt 0 ]; then
    for _ in "$@"; do
      set first="$1"
      shift

      if [ -e "$first" ]; then
        if [ $# -gt 0 ]; then
          setparams "$@" "$first"
        else
          setparams "$first"
        fi
      fi
    done
  fi

  if [ $# -eq 0 ]; then return; fi

  # Below we loop over the set of iso files, pick the "best" one (in terms of
  # cmp_mtime_literal) in the current set and exclude it from the set before
  # starting the next iteration. When the "best" iso in the current set is
  # found, we feed it to the callback.

  while [ $# -gt 2 ]; do
    set best="$1"
    shift

    for _ in "$@"; do
      set next="$1"
      shift

      if cmp_mtime_literal "$next" "$best"; then
        # next is better
        setparams "$@" "$best"
        set best="$next"
      else
        # next is nothing special
        setparams "$@" "$next"
      fi
    done

    "$callback" "$best"
  done

  if [ $# -eq 2 ]; then
    if cmp_mtime_literal "$2" "$1"; then
      setparams "$2" "$1"
    fi

    "$callback" "$1"
    shift
  fi

  "$callback" "$1"
}

# Check if any of its args is an existing path
function any_exists {
  if [ $# -gt 0 ]; then
    for isofile in "$@"; do
      if [ -e "$isofile" ]; then
        return 0
      fi
    done
  fi

  return 1
}

# Menu!
# We (ab)use 'for' to check for at least one ISO file to show the menu entry

if any_exists ${isopath}/almalinux/AlmaLinux-*-Live-*.iso; then
  menuentry "AlmaLinux >" --class almalinux {
    configfile "${prefix}/inc-almalinux.cfg"
  }
fi

if any_exists ${isopath}/antix/antiX-*.iso; then
  menuentry "antiX >" --class antix {
    configfile "${prefix}/inc-antix.cfg"
  }
fi

if any_exists ${isopath}/arch/archlinux-*.iso; then
  menuentry "Arch Linux >" --class arch {
    configfile "${prefix}/inc-arch.cfg"
  }
fi

if any_exists ${isopath}/artix/artix-*.iso; then
  menuentry "Artix >" --class artix {
    configfile "${prefix}/inc-artix.cfg"
  }
fi

if any_exists ${isopath}/bodhi/bodhi-*.iso; then
  menuentry "Bodhi Linux >" --class bodhi {
    configfile "${prefix}/inc-bodhi.cfg"
  }
fi

if any_exists ${isopath}/calculate/cl*.iso; then
  menuentry "Calculate Linux >" --class calculate {
    configfile "${prefix}/inc-calculate.cfg"
  }
fi

if any_exists ${isopath}/centos/CentOS-*-Live*.iso; then
  menuentry "CentOS >" --class centos {
    configfile "${prefix}/inc-centos.cfg"
  }
fi

if any_exists ${isopath}/clonezilla/clonezilla-live-*.iso; then
  menuentry "Clonezilla >" --class clonezilla {
    configfile "${prefix}/inc-clonezilla.cfg"
  }
fi

if any_exists ${isopath}/debian/debian-live-*.iso ${isopath}/debian/mini.iso; then
  menuentry "Debian >" --class debian {
    configfile "${prefix}/inc-debian.cfg"
  }
fi

if any_exists ${isopath}/elementary/elementaryos-*.iso; then
  menuentry "elementary OS >" --class elementary {
    configfile "${prefix}/inc-elementary.cfg"
  }
fi

if any_exists ${isopath}/fedora/Fedora-*.iso; then
  menuentry "Fedora >" --class fedora {
    configfile "${prefix}/inc-fedora.cfg"
  }
fi

if any_exists ${isopath}/finnix/finnix-*.iso; then
  menuentry "Finnix >" --class finnix {
    configfile "${prefix}/inc-finnix.cfg"
  }
fi

if any_exists ${isopath}/gentoo/*.iso; then
  menuentry "Gentoo >" --class gentoo {
    configfile "${prefix}/inc-gentoo.cfg"
  }
fi

if any_exists ${isopath}/gparted/gparted-live-*.iso; then
  menuentry "GParted >" --class gparted {
    configfile "${prefix}/inc-gparted.cfg"
  }
fi

if any_exists ${isopath}/grml/grml*.iso; then
  menuentry "Grml >" --class grml {
    configfile "${prefix}/inc-grml.cfg"
  }
fi

if any_exists ${isopath}/ipxe/ipxe*.iso ${isopath}/ipxe/ipxe*.efi; then
  menuentry "iPXE >" --class net {
    configfile "${prefix}/inc-ipxe.cfg"
  }
fi

if any_exists ${isopath}/kali/kali-*.iso; then
  menuentry "Kali >" --class kali {
    configfile "${prefix}/inc-kali.cfg"
  }
fi

if any_exists ${isopath}/kubuntu/kubuntu-*.iso; then
  menuentry "Kubuntu >" --class kubuntu {
    configfile "${prefix}/inc-kubuntu.cfg"
  }
fi

if [ -e "/KERNEL" -a -e "/SYSTEM" ]; then
  menuentry "LibreELEC >" --class libreelec {
    configfile "${prefix}/inc-libreelec.cfg"
  }
fi

if any_exists ${isopath}/linuxmint/linuxmint-*.iso ${isopath}/linuxmint/lmde-*.iso; then
  menuentry "Linux Mint >" --class linuxmint {
    configfile "${prefix}/inc-linuxmint.cfg"
  }
fi

if any_exists ${isopath}/lubuntu/lubuntu-*.iso; then
  menuentry "Lubuntu >" --class lubuntu {
    configfile "${prefix}/inc-lubuntu.cfg"
  }
fi

if any_exists ${isopath}/manjaro/manjaro-*.iso; then
  menuentry "Manjaro >" --class manjaro {
    configfile "${prefix}/inc-manjaro.cfg"
  }
fi

if any_exists ${isopath}/memtest/memtest*.bin ${isopath}/memtest/memtest*.efi; then
  menuentry "Memtest >" --class memtest {
    configfile "${prefix}/inc-memtest.cfg"
  }
fi

if any_exists ${isopath}/mxlinux/MX-*.iso; then
  menuentry "MX Linux >" --class mxlinux {
    configfile "${prefix}/inc-mxlinux.cfg"
  }
fi

if any_exists ${isopath}/netrunner/netrunner-*.iso; then
  menuentry "Netrunner >" --class netrunner {
    configfile "${prefix}/inc-netrunner.cfg"
  }
fi

if any_exists ${isopath}/openbsd/*.iso; then
  menuentry "OpenBSD >" --class openbsd {
    configfile "${prefix}/inc-openbsd.cfg"
  }
fi

if any_exists ${isopath}/opensuse/openSUSE-*.iso; then
  menuentry "openSUSE >" --class opensuse {
    configfile "${prefix}/inc-opensuse.cfg"
  }
fi

if any_exists ${isopath}/peppermint/PeppermintOS-*.iso; then
  menuentry "Peppermint >" --class peppermint {
    configfile "${prefix}/inc-peppermint.cfg"
  }
fi

if any_exists ${isopath}/popos/pop-os_*.iso; then
  menuentry "Pop!_OS >" --class popos {
    configfile "${prefix}/inc-popos.cfg"
  }
fi

if any_exists ${isopath}/porteus/Porteus-*.iso; then
  menuentry "Porteus >" --class porteus {
    configfile "${prefix}/inc-porteus.cfg"
  }
fi

if any_exists ${isopath}/rhel/rhel-*.iso; then
  menuentry "Red Hat Enterprise Linux >" --class redhat {
    configfile "${prefix}/inc-rhel.cfg"
  }
fi

if any_exists ${isopath}/rockylinux/Rocky-*.iso; then
  menuentry "Rocky Linux >" --class rockylinux {
    configfile "${prefix}/inc-rockylinux.cfg"
  }
fi

if any_exists ${isopath}/slitaz/slitaz-*.iso; then
  menuentry "SliTaz >" --class slitaz {
    configfile "${prefix}/inc-slitaz.cfg"
  }
fi

if any_exists ${isopath}/supergrub2disk/super*.iso; then
  menuentry "Super Grub2 Disk >" --class disk {
    configfile "${prefix}/inc-supergrub2disk.cfg"
  }
fi

if any_exists ${isopath}/systemrescue/systemrescue-*.iso; then
  menuentry "SystemRescue >" --class systemrescue {
    configfile "${prefix}/inc-systemrescue.cfg"
  }
fi

if any_exists ${isopath}/tails/tails-*.iso; then
  menuentry "Tails >" --class tails {
    configfile "${prefix}/inc-tails.cfg"
  }
fi

if any_exists ${isopath}/ubuntubudgie/ubuntu-budgie-*.iso; then
  menuentry "Ubuntu Budgie >" --class ubuntubudgie {
    configfile "${prefix}/inc-ubuntubudgie.cfg"
  }
fi

if any_exists ${isopath}/ubuntu/ubuntu-*.iso; then
  menuentry "Ubuntu >" --class ubuntu {
    configfile "${prefix}/inc-ubuntu.cfg"
  }
fi

if any_exists ${isopath}/void/void-live-*.iso; then
  menuentry "Void >" --class void {
    configfile "${prefix}/inc-void.cfg"
  }
fi

if any_exists ${isopath}/xubuntu/xubuntu-*.iso; then
  menuentry "Xubuntu >" --class xubuntu {
    configfile "${prefix}/inc-xubuntu.cfg"
  }
fi

if any_exists ${isopath}/zorinos/Zorin-OS-*.iso; then
  menuentry "Zorin OS >" --class zorinos {
    configfile "${prefix}/inc-zorinos.cfg"
  }
fi

menuentry ' ' { # Empty line
  true
}

if [ "${grub_platform}" = "efi" ]; then
  menuentry "UEFI Firmware Settings" --class uefi {
    fwsetup
  }
fi
menuentry "Reboot" --class shutdown {
  reboot
}
menuentry "Shutdown" --class shutdown {
  halt
}
